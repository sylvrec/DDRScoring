// <auto-generated />
using System;
using DDRScoring.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DDRScoring.Migrations
{
    [DbContext(typeof(DDRScoringContext))]
    [Migration("20211207145653_AddForeignKeyHighScore")]
    partial class AddForeignKeyHighScore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DDRScoring.Data.Entities.CaloriesBurned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("CaloriesBurned");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.HighScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Disqualified")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HighScoreListId")
                        .HasColumnType("bigint");

                    b.Property<long>("HoldNoteScoreId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LifeRemainingSeconds")
                        .HasColumnType("decimal(18,10)");

                    b.Property<string>("MachineGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PeakComboAward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PercentDP")
                        .HasColumnType("decimal(18,10)");

                    b.Property<string>("PlayerGuid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("RadarValuesId")
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("StageAward")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SurviveSeconds")
                        .HasColumnType("decimal(18,10)");

                    b.Property<long>("TapNoteScoresId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HighScoreListId");

                    b.HasIndex("HoldNoteScoreId");

                    b.HasIndex("RadarValuesId");

                    b.HasIndex("TapNoteScoresId");

                    b.ToTable("HighScores");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.HighScoreList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HighGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastPlayed")
                        .HasColumnType("datetime2");

                    b.Property<long>("NumTimesPlayed")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("HighScoreList");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.HoldNoteScores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Held")
                        .HasColumnType("int");

                    b.Property<int>("LetGo")
                        .HasColumnType("int");

                    b.Property<int>("MissedHold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HoldNoteScores");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.RadarValues", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Air")
                        .HasColumnType("decimal(18,10)");

                    b.Property<decimal>("Chaos")
                        .HasColumnType("decimal(18,10)");

                    b.Property<long>("Fakes")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Freeze")
                        .HasColumnType("decimal(18,10)");

                    b.Property<long>("Hands")
                        .HasColumnType("bigint");

                    b.Property<long>("Holds")
                        .HasColumnType("bigint");

                    b.Property<long>("Jumps")
                        .HasColumnType("bigint");

                    b.Property<long>("Lifts")
                        .HasColumnType("bigint");

                    b.Property<long>("Mines")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Notes")
                        .HasColumnType("decimal(18,10)");

                    b.Property<long>("Rolls")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Stream")
                        .HasColumnType("decimal(18,10)");

                    b.Property<long>("TapsAndHolds")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Voltage")
                        .HasColumnType("decimal(18,10)");

                    b.HasKey("Id");

                    b.ToTable("RadarValues");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Steps", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Difficulty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HighScoreListId")
                        .HasColumnType("bigint");

                    b.Property<long>("SongId")
                        .HasColumnType("bigint");

                    b.Property<string>("StepsType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HighScoreListId")
                        .IsUnique();

                    b.HasIndex("SongId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.StoreUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.TapNoteScores", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AvoidMine")
                        .HasColumnType("bigint");

                    b.Property<long>("CheckpointHit")
                        .HasColumnType("bigint");

                    b.Property<long>("CheckpointMiss")
                        .HasColumnType("bigint");

                    b.Property<long>("HitMine")
                        .HasColumnType("bigint");

                    b.Property<long>("Miss")
                        .HasColumnType("bigint");

                    b.Property<long>("W1")
                        .HasColumnType("bigint");

                    b.Property<long>("W2")
                        .HasColumnType("bigint");

                    b.Property<long>("W3")
                        .HasColumnType("bigint");

                    b.Property<long>("W4")
                        .HasColumnType("bigint");

                    b.Property<long>("W5")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TapNoteScores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.CaloriesBurned", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.Player", null)
                        .WithMany("CaloriesBurneds")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.HighScore", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.HighScoreList", "HighScoreList")
                        .WithMany("HighScore")
                        .HasForeignKey("HighScoreListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDRScoring.Data.Entities.HoldNoteScores", "HoldNoteScores")
                        .WithMany()
                        .HasForeignKey("HoldNoteScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDRScoring.Data.Entities.RadarValues", "RadarValues")
                        .WithMany()
                        .HasForeignKey("RadarValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDRScoring.Data.Entities.TapNoteScores", "TapNoteScores")
                        .WithMany()
                        .HasForeignKey("TapNoteScoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HighScoreList");

                    b.Navigation("HoldNoteScores");

                    b.Navigation("RadarValues");

                    b.Navigation("TapNoteScores");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Player", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.StoreUser", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Song", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.Player", "Player")
                        .WithMany("Songs")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Steps", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.HighScoreList", "HighScoreList")
                        .WithOne("Steps")
                        .HasForeignKey("DDRScoring.Data.Entities.Steps", "HighScoreListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDRScoring.Data.Entities.Song", "Song")
                        .WithMany("Steps")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HighScoreList");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.StoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.StoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDRScoring.Data.Entities.StoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DDRScoring.Data.Entities.StoreUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.HighScoreList", b =>
                {
                    b.Navigation("HighScore");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Player", b =>
                {
                    b.Navigation("CaloriesBurneds");

                    b.Navigation("Songs");
                });

            modelBuilder.Entity("DDRScoring.Data.Entities.Song", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
